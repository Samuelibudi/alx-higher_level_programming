``0-add_integer`` module
=========================

Usage:
======

Importing function from module:
>>> add_integer = __import__('0-add_integer').add_integer

Adding two integers
>>> add_integer(1, 2)
3

Adding two integers with one being negative
>>> add_integer(50, -1)
49

>>> add_integer(-2)
96

Adding a float to an integer
>>> add_integer(2.1, 98)
100

>>> add_integer(98.4, -2)
96

Adding two floating numbers
>>> add_integer(3.4, 2.3)
5

In case a string is passed
>>> add_integer(5, "Fake")
Traceback (most recent call last):
	...
TypeError: b must be an integer

Passing None
>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer

Passing a letter and integer
>>> add_integer(3, 'u')
Traceback (most recent call last):
	...
TypeError: b must be an integer

Passing two letters
>>> add_integer('j', 'l')
Traceback (most recent call last):
	...
TypeError: a must be an integer

Passing a tuple
>>> add_integer((2, 3))
Traceback (most recent call last):
	...
TypeError: a must be an integer

Passing a string
>>> add_integer("Samuel")
Traceback (most recent call last):
	...
TypeError: a must be an integer

Case Overflow:
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

Case Overflow 2:
>>> add_integer(float('inf'), float('-inf'))
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

Case NaN:

>>> add_integer(0, float('nan'))
Traceback (most recent call last):
	...
ValueError: cannot convert float NaN to integer

